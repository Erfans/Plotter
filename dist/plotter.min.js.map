{"version":3,"sources":["plotter.js"],"names":["global","factory","define","amd","exports","require","mod","exprEval","Konva","plotter","globalThis","self","this","_exports","_exprEval","_Konva","obj","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","value","default","__esModule","_default","window","Plotter","canvasId","width","arguments","undefined","height","ranges","minX","maxX","minY","maxY","_ref","_ref$gridColor","gridColor","_ref$bgColor","bgColor","_ref$borderColor","borderColor","_ref$borderWidth","borderWidth","_ref$textFontSize","textFontSize","_ref$textFontStyle","textFontStyle","_ref$axesWidth","axesWidth","instance","TypeError","_classCallCheck","plots","stage","Stage","container","staticLayer","Layer","hitGraphEnabled","add","plotsLayer","draggable","_initialRanges","setWindow","_drawBg","_drawBorder","drawAxes","draw","on","e","refresh","get","filledRanges","calcFilledRanges","transformMatrix","calcTransformMatrix","scaleX","scaleY","offsetX","offsetY","_redraw","_calcRanges","rangeX","rangeY","drawLine","layer","id","points","color","strokeSize","name","axis","findOne","strokeWidth","Line","stroke","listening","transformsEnabled","strokeHitEnabled","_scaleSize","roundNumberOfDigits","number","decimal","roundLimitX","Math","pow","round","find","each","counterLine","destroy","counterLineSize","textHalfWidth","minusDoubleCounterLineSize","stepX","numberOfDigitsX","floor","log10","stepY","numberText","fixNumber","toFixed","writeMessage","func","expr","Parser","parse","_calcPoints","plot","_addExpression","expression","push","x","y","stepFine","stepRough","limitMinY","limitMaxY","limitMaxX","evaluate","plotNumber","tempLink","document","createElement","href","toDataURL","download","click","rect","Rect","fill","opacity","perfectDrawEnabled","shadowForStrokeEnabled","position","_zoom","scale","offset","positionX","positionY","size","abs","message","fontSize","fontStyle","text","Text","fontFamily","xRatio","yRatio","differ","ratio","calcMinRatio"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nimport {Parser} from 'expr-eval'\r\nimport Konva from 'Konva'\r\n\r\nexport default window.Plotter =\r\n  class Plotter {\r\n\r\n    static get Version () {\r\n      return '1.2.0'\r\n    }\r\n\r\n    /**\r\n     * @param {string} canvasId - pass the canvas id\r\n     * @param {number} width - with of the canvas\r\n     * @param {number} height - height of the canvas\r\n     * @param {{minX: number, maxX: number, minY: number, maxY: number}} ranges - initial range of the window\r\n     * @param {object} config\r\n     */\r\n    constructor (\r\n      canvasId,\r\n      width = window.width - 200,\r\n      height = window.height - 200,\r\n      ranges = {minX: -5, maxX: 5, minY: -5, maxY: 5},\r\n      {\r\n        gridColor = '#888',\r\n        bgColor = '#fff',\r\n        borderColor = '#333',\r\n        borderWidth = 2,\r\n        textFontSize = 14,\r\n        textFontStyle = 'bold',\r\n        axesWidth = 1\r\n      } = {}) {\r\n\r\n      /**\r\n       * Array of plots\r\n       *\r\n       * @type {Array}\r\n       */\r\n      this.plots = []\r\n\r\n      this.gridColor = gridColor\r\n      this.bgColor = bgColor\r\n      this.borderColor = borderColor\r\n      this.borderWidth = borderWidth\r\n      this.textFontSize = textFontSize\r\n      this.textFontStyle = textFontStyle\r\n      this.axesWidth = axesWidth\r\n\r\n      this.width = width\r\n      this.height = height\r\n\r\n      this.stage = new Konva.Stage({\r\n        container: canvasId,\r\n        width: width,\r\n        height: height\r\n      })\r\n\r\n      this.staticLayer = new Konva.Layer({hitGraphEnabled: false})\r\n      this.stage.add(this.staticLayer)\r\n\r\n      this.plotsLayer = new Konva.Layer({draggable: true})\r\n      this.stage.add(this.plotsLayer)\r\n\r\n      /**\r\n       * Store initial ranges for reset view\r\n       *\r\n       * @type {Object}\r\n       * @private\r\n       */\r\n      this._initialRanges = ranges\r\n\r\n      this.setWindow(ranges.minX, ranges.maxX, ranges.minY, ranges.maxY, true)\r\n      this._drawBg()\r\n      this._drawBorder()\r\n      this.drawAxes()\r\n\r\n      this.plotsLayer.draw()\r\n      this.staticLayer.draw()\r\n\r\n      let self = this\r\n\r\n      // drag\r\n      this.stage.on('dragend', function (e) {\r\n        self.refresh()\r\n      })\r\n    }\r\n\r\n    /**\r\n     * Return the container\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    get getContainer () {\r\n      return this.stage.container()\r\n    }\r\n\r\n    /**\r\n     * set the window range\r\n     *\r\n     * @param {number} minX\r\n     * @param {number} maxX\r\n     * @param {number} minY\r\n     * @param {number} maxY\r\n     * @param {boolean} fill - fill the window based on the canvas size\r\n     */\r\n    setWindow (minX, maxX, minY, maxY, fill = true) {\r\n      if (fill) {\r\n        let filledRanges = Plotter.calcFilledRanges(minX, maxX, minY, maxY, this.width, this.height)\r\n        ;({minX, maxX, minY, maxY} = filledRanges)\r\n      }\r\n\r\n      let transformMatrix = Plotter.calcTransformMatrix(minX, maxX, minY, maxY, this.width, this.height)\r\n\r\n      // transform the plots layer\r\n      this.plotsLayer.scaleX(transformMatrix[0])\r\n      this.plotsLayer.scaleY(transformMatrix[3])\r\n      this.plotsLayer.offsetX(-transformMatrix[4] / transformMatrix[0])\r\n      this.plotsLayer.offsetY(-transformMatrix[5] / transformMatrix[3])\r\n    }\r\n\r\n    /**\r\n     * Redraw the canvas\r\n     */\r\n    refresh () {\r\n      this._drawBg()\r\n      this.drawAxes()\r\n      this._redraw()\r\n\r\n      this.plotsLayer.draw()\r\n    }\r\n\r\n    /**\r\n     * Draw axes\r\n     */\r\n    drawAxes () {\r\n      let ranges = this._calcRanges()\r\n      let {minX, maxX, minY, maxY, rangeX, rangeY} = ranges\r\n\r\n      // increase ranges for fluent view on drag\r\n      minX -= rangeX\r\n      maxX += rangeX\r\n      minY -= rangeY\r\n      maxY += rangeY\r\n\r\n      function drawLine (layer, id, points, color, strokeSize, name) {\r\n        let axis = layer.findOne('#' + id)\r\n        if (axis) {\r\n          axis.points(points)\r\n          axis.strokeWidth(strokeSize)\r\n        } else {\r\n          axis = new Konva.Line({\r\n            points: points,\r\n            stroke: color,\r\n            strokeWidth: strokeSize,\r\n            id: id,\r\n            name: name,\r\n            listening: false,\r\n            transformsEnabled: 'none',\r\n            strokeHitEnabled: false\r\n          })\r\n          layer.add(axis)\r\n        }\r\n      }\r\n\r\n      let strokeSize = this._scaleSize(this.axesWidth)\r\n\r\n      drawLine(this.plotsLayer, 'xAxis', [minX, 0, maxX, 0], this.gridColor, strokeSize)\r\n      drawLine(this.plotsLayer, 'yAxis', [0, minY, 0, maxY], this.gridColor, strokeSize)\r\n\r\n      function roundNumberOfDigits (number, decimal) {\r\n        let roundLimitX = Math.pow(10, decimal)\r\n        return Math.round(number / roundLimitX) * roundLimitX\r\n      }\r\n\r\n      let counterLines = this.plotsLayer.find('.AxisCounter')\r\n      counterLines.each(function (counterLine) {\r\n        counterLine.destroy()\r\n      })\r\n\r\n      let counterLineSize = this._scaleSize(5)\r\n      let fontSize = 12\r\n      let textHalfWidth = this._scaleSize(3)\r\n      let minusDoubleCounterLineSize = -counterLineSize * 2\r\n\r\n      let stepX = rangeX / (this.width / 60)\r\n      let numberOfDigitsX = Math.floor(Math.log10(stepX))\r\n      stepX = roundNumberOfDigits(stepX, numberOfDigitsX)\r\n      if (stepX === 0) {\r\n        stepX = 1\r\n      }\r\n\r\n      let stepY = rangeY / (this.height / 60)\r\n      let numberOfDigitsY = Math.floor(Math.log10(stepX))\r\n      stepY = roundNumberOfDigits(stepY, numberOfDigitsY)\r\n      if (stepY === 0) {\r\n        stepY = 1\r\n      }\r\n\r\n      let fixNumber = numberOfDigitsX < 0 ? -numberOfDigitsX : 0\r\n      let i, numberText\r\n      // Draw counter lines on horizontal axis\r\n      for (i = stepX; i <= maxX; i += stepX) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n\r\n      // Draw counter lines on horizontal axis\r\n      for (i = -stepX; i >= minX; i -= stepX) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n\r\n      // Draw little lines on vertical axis\r\n      for (i = stepY; i <= maxY; i += stepY) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n\r\n      // Draw little lines on vertical axis\r\n      for (i = -stepY; i >= minY; i -= stepY) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Write a message on a layer\r\n     *\r\n     * @param layer\r\n     * @param id\r\n     * @param x\r\n     * @param y\r\n     * @param message\r\n     * @param color\r\n     * @param fontSize\r\n     * @param fontStyle\r\n     * @param name\r\n     */\r\n    static writeMessage (layer, id, x, y, message, color, fontSize = 14, fontStyle = 'normal', name) {\r\n      let text = layer.findOne('#' + id)\r\n      if (text) {\r\n        text.x(x)\r\n        text.y(y)\r\n        text.text(message)\r\n        text.fontSize(fontSize)\r\n        text.fill(color)\r\n      } else {\r\n        text = new Konva.Text({\r\n          x: x,\r\n          y: y,\r\n          text: message,\r\n          id: id,\r\n          fontSize: fontSize,\r\n          fontFamily: 'Calibri',\r\n          fill: color,\r\n          fontStyle: fontStyle,\r\n          name: name,\r\n          scaleX: 1 / layer.scaleX(),\r\n          scaleY: 1 / layer.scaleY(),\r\n          listening: false\r\n        })\r\n        layer.add(text)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add a new function and plot it\r\n     *\r\n     * @param func\r\n     * @param color\r\n     */\r\n    plot (func, color) {\r\n      let expr = Parser.parse(func)\r\n      let points = this._calcPoints(expr)\r\n\r\n      let plot = new Konva.Line({\r\n        id: 'plot' + this.plots.length,\r\n        points: points,\r\n        stroke: color,\r\n        strokeWidth: this._scaleSize(2),\r\n        draggable: false,\r\n        transformsEnabled: 'none',\r\n        listening: false\r\n      })\r\n\r\n      this.plotsLayer.add(plot)\r\n      this.plotsLayer.draw()\r\n\r\n      this._addExpression(this.plots.length, func, color)\r\n\r\n      // keep the original input and color assigned to the expression\r\n      expr.expression = func\r\n      expr.color = color\r\n\r\n      this.plots.push(expr)\r\n    }\r\n\r\n    /**\r\n     * Redraw the added functions\r\n     *\r\n     * @private\r\n     */\r\n    _redraw () {\r\n      let strokeSize = this._scaleSize(2)\r\n\r\n      for (let i = 0; i < this.plots.length; i++) {\r\n        let plot = this.plotsLayer.findOne('#plot' + i)\r\n        let expr = this.plots[i]\r\n        let points = this._calcPoints(expr)\r\n        plot.points(points)\r\n        plot.strokeWidth(strokeSize)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculate points associated to a function in the defined range\r\n     *\r\n     * @param expr\r\n     * @returns {Array}\r\n     * @private\r\n     */\r\n    _calcPoints (expr) {\r\n      let ranges = this._calcRanges()\r\n\r\n      let minX = ranges.minX\r\n      let maxX = ranges.maxX\r\n      let minY = ranges.minY\r\n      let maxY = ranges.maxY\r\n\r\n      let rangeX = maxX - minX\r\n      let rangeY = maxY - minY\r\n\r\n      let stepFine = this._scaleSize(0.05)\r\n      let stepRough = this._scaleSize(1)\r\n\r\n      let points = []\r\n\r\n      let limitMinY = minY - rangeY\r\n      let limitMaxY = maxY + rangeY\r\n      let limitMaxX = maxX + rangeX\r\n\r\n      let x, y\r\n      for (x = minX - rangeX; x < minX; x += stepRough) {\r\n        y = expr.evaluate({x: x})\r\n        if (limitMaxY < y || y < limitMinY) continue\r\n        points.push(x)\r\n        points.push(y)\r\n      }\r\n\r\n      for (x = minX; x < maxX; x += stepFine) {\r\n        y = expr.evaluate({x: x})\r\n        if (limitMaxY < y || y < limitMinY) continue\r\n        points.push(x)\r\n        points.push(y)\r\n      }\r\n\r\n      for (x = maxX; x <= limitMaxX; x += stepRough) {\r\n        y = expr.evaluate({x: x})\r\n        if (limitMaxY < y || y < limitMinY) continue\r\n        points.push(x)\r\n        points.push(y)\r\n      }\r\n\r\n      return points\r\n    }\r\n\r\n    _addExpression (plotNumber, func, color) {\r\n      Plotter.writeMessage(this.staticLayer, 'expression' + this.plots.length, 10, 20 * this.plots.length + 10, func, color, 14, 'bold', 'expression')\r\n      this.staticLayer.draw()\r\n    }\r\n\r\n    clear () {\r\n      for (let i = 0; i < this.plots.length; i++) {\r\n        let plot = this.plotsLayer.findOne('#plot' + i)\r\n        plot.destroy()\r\n        let expression = this.staticLayer.findOne('#expression' + i)\r\n        expression.destroy()\r\n      }\r\n      this.plots = []\r\n\r\n      this.refresh()\r\n      this.staticLayer.draw()\r\n    }\r\n\r\n    download () {\r\n      let tempLink = document.createElement('a')\r\n      tempLink.href = this.stage.toDataURL()\r\n      tempLink.download = 'plot.png'\r\n      tempLink.click()\r\n    }\r\n\r\n    /**\r\n     * Add a transparent box to enhance dragging\r\n     *\r\n     * @private\r\n     */\r\n    _drawBg () {\r\n      let ranges = this._calcRanges()\r\n\r\n      let rangeX = ranges.maxX - ranges.minX\r\n      let rangeY = ranges.maxY - ranges.minY\r\n\r\n      let rect = this.plotsLayer.findOne('#bg')\r\n      if (rect) {\r\n        rect.x(ranges.minX)\r\n        rect.y(ranges.minY)\r\n        rect.width(rangeX)\r\n        rect.height(rangeY)\r\n      } else {\r\n        rect = new Konva.Rect({\r\n          id: 'bg',\r\n          x: ranges.minX,\r\n          y: ranges.minY,\r\n          width: rangeX,\r\n          height: rangeY,\r\n          fill: '#fff', // not important since the box is invisible\r\n          stroke: '#fff', // not important since the box is invisible\r\n          strokeWidth: 0,\r\n          opacity: 0,\r\n          perfectDrawEnabled: false,\r\n          shadowForStrokeEnabled: false\r\n        })\r\n\r\n        this.plotsLayer.add(rect)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add a border box to enhance dragging and add a border to canvas\r\n     *\r\n     * @private\r\n     */\r\n    _drawBorder () {\r\n      let rect = new Konva.Rect({\r\n        id: 'border',\r\n        x: 0,\r\n        y: 0,\r\n        width: this.width,\r\n        height: this.height,\r\n        fill: this.bgColor,\r\n        stroke: this.borderColor,\r\n        strokeWidth: this.borderWidth,\r\n        perfectDrawEnabled: false,\r\n        listening: false,\r\n        shadowForStrokeEnabled: false\r\n      })\r\n\r\n      this.staticLayer.add(rect)\r\n    }\r\n\r\n    /**\r\n     * Reset view to initial state\r\n     */\r\n    resetView () {\r\n      this.plotsLayer.position({x: 0, y: 0})\r\n      this.setWindow(this._initialRanges.minX, this._initialRanges.maxX, this._initialRanges.minY, this._initialRanges.maxY, true)\r\n\r\n      this.refresh()\r\n    }\r\n\r\n    /**\r\n     * Zoom\r\n     *\r\n     * @param {number} zoom\r\n     */\r\n    zoom (zoom) {\r\n      let scale = this.plotsLayer.scale()\r\n      let offset = this.plotsLayer.offset()\r\n\r\n      this.plotsLayer.scale({x: scale.x * zoom, y: scale.y * zoom})\r\n      this.plotsLayer.offset({x: offset.x / zoom, y: offset.y / zoom})\r\n\r\n      this.refresh()\r\n    }\r\n\r\n    /**\r\n     * Calculate the smaller ratio\r\n     *\r\n     * @param {number} rangeX\r\n     * @param {number} rangeY\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @returns {number}\r\n     *\r\n     * @private\r\n     */\r\n    static calcMinRatio (rangeX, rangeY, width, height) {\r\n      let xRatio = width / rangeX\r\n      let yRatio = height / rangeY\r\n\r\n      return yRatio < xRatio ? yRatio : xRatio\r\n    }\r\n\r\n    /**\r\n     * calculate the range to fill the canvas\r\n     *\r\n     * @param {number} minX\r\n     * @param {number} maxX\r\n     * @param {number} minY\r\n     * @param {number} maxY\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @returns {{minX: number, maxX: number, minY: number, maxY: number, rangeX: number, rangeY: number}}\r\n     *\r\n     * @private\r\n     */\r\n    static calcFilledRanges (minX, maxX, minY, maxY, width, height) {\r\n      let rangeX = maxX - minX\r\n      let rangeY = maxY - minY\r\n\r\n      let differ\r\n      let ratio = Plotter.calcMinRatio(rangeX, rangeY, width, height)\r\n\r\n      // increase horizontal range to fill the canvas\r\n      if (rangeX * ratio < width) {\r\n        differ = (width / ratio - rangeX) / 2\r\n        return {\r\n          minX: minX - differ,\r\n          maxX: maxX + differ,\r\n          minY: minY,\r\n          maxY: maxY,\r\n          rangeX: maxX + differ - (minX - differ),\r\n          rangeY: maxY - minY\r\n        }\r\n      }\r\n\r\n      // increase vertical range to fill the canvas\r\n      if (rangeY * ratio < height) {\r\n        differ = (height / ratio - rangeY) / 2\r\n        return {\r\n          minX: minX,\r\n          maxX: maxX,\r\n          minY: minY - differ,\r\n          maxY: maxY + differ,\r\n          rangeX: maxX - minX,\r\n          rangeY: maxY + differ - (minY - differ)\r\n        }\r\n      }\r\n\r\n      return {\r\n        minX: minX,\r\n        maxX: maxX,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        rangeX: maxX - minX,\r\n        rangeY: maxY - minY\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculate the displaying range\r\n     *\r\n     * @returns {{minX: number, maxX: number, minY: number, maxY: number, rangeX: number, rangeY: number}}\r\n     * @private\r\n     */\r\n    _calcRanges () {\r\n      let positionX = this.plotsLayer.position().x / this.plotsLayer.scaleX()\r\n      let positionY = this.plotsLayer.position().y / this.plotsLayer.scaleY()\r\n\r\n      let minX = this.plotsLayer.offsetX() - positionX\r\n      let maxX = this.width / this.plotsLayer.scaleX() + this.plotsLayer.offsetX() - positionX\r\n      let minY = this.height / this.plotsLayer.scaleY() + this.plotsLayer.offsetY() - positionY\r\n      let maxY = this.plotsLayer.offsetY() - positionY\r\n\r\n      return {\r\n        minX: minX,\r\n        maxX: maxX,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        rangeX: maxX - minX,\r\n        rangeY: maxY - minY\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculate scale to zoom in and zoom out\r\n     *\r\n     * @param {number} size\r\n     * @returns {number}\r\n     * @private\r\n     */\r\n    _scaleSize (size) {\r\n      let scale = (Math.abs(this.plotsLayer.scaleX()) + Math.abs(this.plotsLayer.scaleY())) / 2\r\n      return size / scale\r\n    }\r\n\r\n    /**\r\n     * Calculate the transformation matrix\r\n     *\r\n     * @param {number} minX\r\n     * @param {number} maxX\r\n     * @param {number} minY\r\n     * @param {number} maxY\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @returns {*[]}\r\n     * @private\r\n     */\r\n    static calcTransformMatrix (minX, maxX, minY, maxY, width, height) {\r\n      let ratio = Plotter.calcMinRatio(maxX - minX, maxY - minY, width, height)\r\n\r\n      let xIntercept = -(minX * ratio)\r\n      let yIntercept = maxY * ratio\r\n\r\n      return [ratio, 0, 0, -ratio, xIntercept, yIntercept]\r\n    }\r\n  }\r\n"],"file":"plotter.min.js"}