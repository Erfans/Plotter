{"version":3,"sources":["plotter.js"],"names":["window","Plotter","canvasId","width","height","ranges","minX","maxX","minY","maxY","gridColor","bgColor","borderColor","borderWidth","textFontSize","textFontStyle","axesWidth","plots","stage","Konva","Stage","container","staticLayer","Layer","hitGraphEnabled","add","plotsLayer","draggable","_initialRanges","setWindow","_drawBg","_drawBorder","drawAxes","draw","self","on","e","refresh","fill","filledRanges","calcFilledRanges","transformMatrix","calcTransformMatrix","scaleX","scaleY","offsetX","offsetY","_redraw","_calcRanges","rangeX","rangeY","drawLine","layer","id","points","color","strokeSize","name","axis","findOne","strokeWidth","Line","stroke","listening","transformsEnabled","strokeHitEnabled","_scaleSize","roundNumberOfDigits","number","decimal","roundLimitX","Math","pow","round","counterLines","find","each","counterLine","destroy","counterLineSize","fontSize","textHalfWidth","minusDoubleCounterLineSize","stepX","numberOfDigitsX","floor","log10","stepY","numberOfDigitsY","fixNumber","i","numberText","toFixed","writeMessage","length","func","expr","Parser","parse","_calcPoints","plot","_addExpression","expression","push","stepFine","stepRough","limitMinY","limitMaxY","limitMaxX","x","y","evaluate","plotNumber","tempLink","document","createElement","href","toDataURL","download","click","rect","Rect","opacity","perfectDrawEnabled","shadowForStrokeEnabled","position","zoom","scale","offset","positionX","positionY","size","abs","message","fontStyle","text","Text","fontFamily","xRatio","yRatio","differ","ratio","calcMinRatio","xIntercept","yIntercept"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nimport {Parser} from 'expr-eval'\r\nimport Konva from 'Konva'\r\n\r\nexport default window.Plotter =\r\n  class Plotter {\r\n\r\n    static get Version () {\r\n      return '1.2.0'\r\n    }\r\n\r\n    /**\r\n     * @param {string} canvasId - pass the canvas id\r\n     * @param {number} width - with of the canvas\r\n     * @param {number} height - height of the canvas\r\n     * @param {{minX: number, maxX: number, minY: number, maxY: number}} ranges - initial range of the window\r\n     * @param {object} config\r\n     */\r\n    constructor (\r\n      canvasId,\r\n      width = window.width - 200,\r\n      height = window.height - 200,\r\n      ranges = {minX: -5, maxX: 5, minY: -5, maxY: 5},\r\n      {\r\n        gridColor = '#888',\r\n        bgColor = '#fff',\r\n        borderColor = '#333',\r\n        borderWidth = 2,\r\n        textFontSize = 14,\r\n        textFontStyle = 'bold',\r\n        axesWidth = 1\r\n      } = {}) {\r\n\r\n      /**\r\n       * Array of plots\r\n       *\r\n       * @type {Array}\r\n       */\r\n      this.plots = []\r\n\r\n      this.gridColor = gridColor\r\n      this.bgColor = bgColor\r\n      this.borderColor = borderColor\r\n      this.borderWidth = borderWidth\r\n      this.textFontSize = textFontSize\r\n      this.textFontStyle = textFontStyle\r\n      this.axesWidth = axesWidth\r\n\r\n      this.width = width\r\n      this.height = height\r\n\r\n      this.stage = new Konva.Stage({\r\n        container: canvasId,\r\n        width: width,\r\n        height: height\r\n      })\r\n\r\n      this.staticLayer = new Konva.Layer({hitGraphEnabled: false})\r\n      this.stage.add(this.staticLayer)\r\n\r\n      this.plotsLayer = new Konva.Layer({draggable: true})\r\n      this.stage.add(this.plotsLayer)\r\n\r\n      /**\r\n       * Store initial ranges for reset view\r\n       *\r\n       * @type {Object}\r\n       * @private\r\n       */\r\n      this._initialRanges = ranges\r\n\r\n      this.setWindow(ranges.minX, ranges.maxX, ranges.minY, ranges.maxY, true)\r\n      this._drawBg()\r\n      this._drawBorder()\r\n      this.drawAxes()\r\n\r\n      this.plotsLayer.draw()\r\n      this.staticLayer.draw()\r\n\r\n      let self = this\r\n\r\n      // drag\r\n      this.stage.on('dragend', function (e) {\r\n        self.refresh()\r\n      })\r\n    }\r\n\r\n    /**\r\n     * Return the container\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    get getContainer () {\r\n      return this.stage.container()\r\n    }\r\n\r\n    /**\r\n     * set the window range\r\n     *\r\n     * @param {number} minX\r\n     * @param {number} maxX\r\n     * @param {number} minY\r\n     * @param {number} maxY\r\n     * @param {boolean} fill - fill the window based on the canvas size\r\n     */\r\n    setWindow (minX, maxX, minY, maxY, fill = true) {\r\n      if (fill) {\r\n        let filledRanges = Plotter.calcFilledRanges(minX, maxX, minY, maxY, this.width, this.height)\r\n        ;({minX, maxX, minY, maxY} = filledRanges)\r\n      }\r\n\r\n      let transformMatrix = Plotter.calcTransformMatrix(minX, maxX, minY, maxY, this.width, this.height)\r\n\r\n      // transform the plots layer\r\n      this.plotsLayer.scaleX(transformMatrix[0])\r\n      this.plotsLayer.scaleY(transformMatrix[3])\r\n      this.plotsLayer.offsetX(-transformMatrix[4] / transformMatrix[0])\r\n      this.plotsLayer.offsetY(-transformMatrix[5] / transformMatrix[3])\r\n    }\r\n\r\n    /**\r\n     * Redraw the canvas\r\n     */\r\n    refresh () {\r\n      this._drawBg()\r\n      this.drawAxes()\r\n      this._redraw()\r\n\r\n      this.plotsLayer.draw()\r\n    }\r\n\r\n    /**\r\n     * Draw axes\r\n     */\r\n    drawAxes () {\r\n      let ranges = this._calcRanges()\r\n      let {minX, maxX, minY, maxY, rangeX, rangeY} = ranges\r\n\r\n      // increase ranges for fluent view on drag\r\n      minX -= rangeX\r\n      maxX += rangeX\r\n      minY -= rangeY\r\n      maxY += rangeY\r\n\r\n      function drawLine (layer, id, points, color, strokeSize, name) {\r\n        let axis = layer.findOne('#' + id)\r\n        if (axis) {\r\n          axis.points(points)\r\n          axis.strokeWidth(strokeSize)\r\n        } else {\r\n          axis = new Konva.Line({\r\n            points: points,\r\n            stroke: color,\r\n            strokeWidth: strokeSize,\r\n            id: id,\r\n            name: name,\r\n            listening: false,\r\n            transformsEnabled: 'none',\r\n            strokeHitEnabled: false\r\n          })\r\n          layer.add(axis)\r\n        }\r\n      }\r\n\r\n      let strokeSize = this._scaleSize(this.axesWidth)\r\n\r\n      drawLine(this.plotsLayer, 'xAxis', [minX, 0, maxX, 0], this.gridColor, strokeSize)\r\n      drawLine(this.plotsLayer, 'yAxis', [0, minY, 0, maxY], this.gridColor, strokeSize)\r\n\r\n      function roundNumberOfDigits (number, decimal) {\r\n        let roundLimitX = Math.pow(10, decimal)\r\n        return Math.round(number / roundLimitX) * roundLimitX\r\n      }\r\n\r\n      let counterLines = this.plotsLayer.find('.AxisCounter')\r\n      counterLines.each(function (counterLine) {\r\n        counterLine.destroy()\r\n      })\r\n\r\n      let counterLineSize = this._scaleSize(5)\r\n      let fontSize = 12\r\n      let textHalfWidth = this._scaleSize(3)\r\n      let minusDoubleCounterLineSize = -counterLineSize * 2\r\n\r\n      let stepX = rangeX / (this.width / 60)\r\n      let numberOfDigitsX = Math.floor(Math.log10(stepX))\r\n      stepX = roundNumberOfDigits(stepX, numberOfDigitsX)\r\n      if (stepX === 0) {\r\n        stepX = 1\r\n      }\r\n\r\n      let stepY = rangeY / (this.height / 60)\r\n      let numberOfDigitsY = Math.floor(Math.log10(stepX))\r\n      stepY = roundNumberOfDigits(stepY, numberOfDigitsY)\r\n      if (stepY === 0) {\r\n        stepY = 1\r\n      }\r\n\r\n      let fixNumber = numberOfDigitsX < 0 ? -numberOfDigitsX : 0\r\n      let i, numberText\r\n      // Draw counter lines on horizontal axis\r\n      for (i = stepX; i <= maxX; i += stepX) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n\r\n      // Draw counter lines on horizontal axis\r\n      for (i = -stepX; i >= minX; i -= stepX) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n\r\n      // Draw little lines on vertical axis\r\n      for (i = stepY; i <= maxY; i += stepY) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n\r\n      // Draw little lines on vertical axis\r\n      for (i = -stepY; i >= minY; i -= stepY) {\r\n        numberText = i.toFixed(fixNumber)\r\n        drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n        Plotter.writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Write a message on a layer\r\n     *\r\n     * @param layer\r\n     * @param id\r\n     * @param x\r\n     * @param y\r\n     * @param message\r\n     * @param color\r\n     * @param fontSize\r\n     * @param fontStyle\r\n     * @param name\r\n     */\r\n    static writeMessage (layer, id, x, y, message, color, fontSize = 14, fontStyle = 'normal', name) {\r\n      let text = layer.findOne('#' + id)\r\n      if (text) {\r\n        text.x(x)\r\n        text.y(y)\r\n        text.text(message)\r\n        text.fontSize(fontSize)\r\n        text.fill(color)\r\n      } else {\r\n        text = new Konva.Text({\r\n          x: x,\r\n          y: y,\r\n          text: message,\r\n          id: id,\r\n          fontSize: fontSize,\r\n          fontFamily: 'Calibri',\r\n          fill: color,\r\n          fontStyle: fontStyle,\r\n          name: name,\r\n          scaleX: 1 / layer.scaleX(),\r\n          scaleY: 1 / layer.scaleY(),\r\n          listening: false\r\n        })\r\n        layer.add(text)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add a new function and plot it\r\n     *\r\n     * @param func\r\n     * @param color\r\n     */\r\n    plot (func, color) {\r\n      let expr = Parser.parse(func)\r\n      let points = this._calcPoints(expr)\r\n\r\n      let plot = new Konva.Line({\r\n        id: 'plot' + this.plots.length,\r\n        points: points,\r\n        stroke: color,\r\n        strokeWidth: this._scaleSize(2),\r\n        draggable: false,\r\n        transformsEnabled: 'none',\r\n        listening: false\r\n      })\r\n\r\n      this.plotsLayer.add(plot)\r\n      this.plotsLayer.draw()\r\n\r\n      this._addExpression(this.plots.length, func, color)\r\n\r\n      // keep the original input and color assigned to the expression\r\n      expr.expression = func\r\n      expr.color = color\r\n\r\n      this.plots.push(expr)\r\n    }\r\n\r\n    /**\r\n     * Redraw the added functions\r\n     *\r\n     * @private\r\n     */\r\n    _redraw () {\r\n      let strokeSize = this._scaleSize(2)\r\n\r\n      for (let i = 0; i < this.plots.length; i++) {\r\n        let plot = this.plotsLayer.findOne('#plot' + i)\r\n        let expr = this.plots[i]\r\n        let points = this._calcPoints(expr)\r\n        plot.points(points)\r\n        plot.strokeWidth(strokeSize)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculate points associated to a function in the defined range\r\n     *\r\n     * @param expr\r\n     * @returns {Array}\r\n     * @private\r\n     */\r\n    _calcPoints (expr) {\r\n      let ranges = this._calcRanges()\r\n\r\n      let minX = ranges.minX\r\n      let maxX = ranges.maxX\r\n      let minY = ranges.minY\r\n      let maxY = ranges.maxY\r\n\r\n      let rangeX = maxX - minX\r\n      let rangeY = maxY - minY\r\n\r\n      let stepFine = this._scaleSize(0.05)\r\n      let stepRough = this._scaleSize(1)\r\n\r\n      let points = []\r\n\r\n      let limitMinY = minY - rangeY\r\n      let limitMaxY = maxY + rangeY\r\n      let limitMaxX = maxX + rangeX\r\n\r\n      let x, y\r\n      for (x = minX - rangeX; x < minX; x += stepRough) {\r\n        y = expr.evaluate({x: x})\r\n        if (limitMaxY < y || y < limitMinY) continue\r\n        points.push(x)\r\n        points.push(y)\r\n      }\r\n\r\n      for (x = minX; x < maxX; x += stepFine) {\r\n        y = expr.evaluate({x: x})\r\n        if (limitMaxY < y || y < limitMinY) continue\r\n        points.push(x)\r\n        points.push(y)\r\n      }\r\n\r\n      for (x = maxX; x <= limitMaxX; x += stepRough) {\r\n        y = expr.evaluate({x: x})\r\n        if (limitMaxY < y || y < limitMinY) continue\r\n        points.push(x)\r\n        points.push(y)\r\n      }\r\n\r\n      return points\r\n    }\r\n\r\n    _addExpression (plotNumber, func, color) {\r\n      Plotter.writeMessage(this.staticLayer, 'expression' + this.plots.length, 10, 20 * this.plots.length + 10, func, color, 14, 'bold', 'expression')\r\n      this.staticLayer.draw()\r\n    }\r\n\r\n    clear () {\r\n      for (let i = 0; i < this.plots.length; i++) {\r\n        let plot = this.plotsLayer.findOne('#plot' + i)\r\n        plot.destroy()\r\n        let expression = this.staticLayer.findOne('#expression' + i)\r\n        expression.destroy()\r\n      }\r\n      this.plots = []\r\n\r\n      this.refresh()\r\n      this.staticLayer.draw()\r\n    }\r\n\r\n    download () {\r\n      let tempLink = document.createElement('a')\r\n      tempLink.href = this.stage.toDataURL()\r\n      tempLink.download = 'plot.png'\r\n      tempLink.click()\r\n    }\r\n\r\n    /**\r\n     * Add a transparent box to enhance dragging\r\n     *\r\n     * @private\r\n     */\r\n    _drawBg () {\r\n      let ranges = this._calcRanges()\r\n\r\n      let rangeX = ranges.maxX - ranges.minX\r\n      let rangeY = ranges.maxY - ranges.minY\r\n\r\n      let rect = this.plotsLayer.findOne('#bg')\r\n      if (rect) {\r\n        rect.x(ranges.minX)\r\n        rect.y(ranges.minY)\r\n        rect.width(rangeX)\r\n        rect.height(rangeY)\r\n      } else {\r\n        rect = new Konva.Rect({\r\n          id: 'bg',\r\n          x: ranges.minX,\r\n          y: ranges.minY,\r\n          width: rangeX,\r\n          height: rangeY,\r\n          fill: '#fff', // not important since the box is invisible\r\n          stroke: '#fff', // not important since the box is invisible\r\n          strokeWidth: 0,\r\n          opacity: 0,\r\n          perfectDrawEnabled: false,\r\n          shadowForStrokeEnabled: false\r\n        })\r\n\r\n        this.plotsLayer.add(rect)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add a border box to enhance dragging and add a border to canvas\r\n     *\r\n     * @private\r\n     */\r\n    _drawBorder () {\r\n      let rect = new Konva.Rect({\r\n        id: 'border',\r\n        x: 0,\r\n        y: 0,\r\n        width: this.width,\r\n        height: this.height,\r\n        fill: this.bgColor,\r\n        stroke: this.borderColor,\r\n        strokeWidth: this.borderWidth,\r\n        perfectDrawEnabled: false,\r\n        listening: false,\r\n        shadowForStrokeEnabled: false\r\n      })\r\n\r\n      this.staticLayer.add(rect)\r\n    }\r\n\r\n    /**\r\n     * Reset view to initial state\r\n     */\r\n    resetView () {\r\n      this.plotsLayer.position({x: 0, y: 0})\r\n      this.setWindow(this._initialRanges.minX, this._initialRanges.maxX, this._initialRanges.minY, this._initialRanges.maxY, true)\r\n\r\n      this.refresh()\r\n    }\r\n\r\n    /**\r\n     * Zoom\r\n     *\r\n     * @param {number} zoom\r\n     */\r\n    zoom (zoom) {\r\n      let scale = this.plotsLayer.scale()\r\n      let offset = this.plotsLayer.offset()\r\n\r\n      this.plotsLayer.scale({x: scale.x * zoom, y: scale.y * zoom})\r\n      this.plotsLayer.offset({x: offset.x / zoom, y: offset.y / zoom})\r\n\r\n      this.refresh()\r\n    }\r\n\r\n    /**\r\n     * Calculate the smaller ratio\r\n     *\r\n     * @param {number} rangeX\r\n     * @param {number} rangeY\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @returns {number}\r\n     *\r\n     * @private\r\n     */\r\n    static calcMinRatio (rangeX, rangeY, width, height) {\r\n      let xRatio = width / rangeX\r\n      let yRatio = height / rangeY\r\n\r\n      return yRatio < xRatio ? yRatio : xRatio\r\n    }\r\n\r\n    /**\r\n     * calculate the range to fill the canvas\r\n     *\r\n     * @param {number} minX\r\n     * @param {number} maxX\r\n     * @param {number} minY\r\n     * @param {number} maxY\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @returns {{minX: number, maxX: number, minY: number, maxY: number, rangeX: number, rangeY: number}}\r\n     *\r\n     * @private\r\n     */\r\n    static calcFilledRanges (minX, maxX, minY, maxY, width, height) {\r\n      let rangeX = maxX - minX\r\n      let rangeY = maxY - minY\r\n\r\n      let differ\r\n      let ratio = Plotter.calcMinRatio(rangeX, rangeY, width, height)\r\n\r\n      // increase horizontal range to fill the canvas\r\n      if (rangeX * ratio < width) {\r\n        differ = (width / ratio - rangeX) / 2\r\n        return {\r\n          minX: minX - differ,\r\n          maxX: maxX + differ,\r\n          minY: minY,\r\n          maxY: maxY,\r\n          rangeX: maxX + differ - (minX - differ),\r\n          rangeY: maxY - minY\r\n        }\r\n      }\r\n\r\n      // increase vertical range to fill the canvas\r\n      if (rangeY * ratio < height) {\r\n        differ = (height / ratio - rangeY) / 2\r\n        return {\r\n          minX: minX,\r\n          maxX: maxX,\r\n          minY: minY - differ,\r\n          maxY: maxY + differ,\r\n          rangeX: maxX - minX,\r\n          rangeY: maxY + differ - (minY - differ)\r\n        }\r\n      }\r\n\r\n      return {\r\n        minX: minX,\r\n        maxX: maxX,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        rangeX: maxX - minX,\r\n        rangeY: maxY - minY\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculate the displaying range\r\n     *\r\n     * @returns {{minX: number, maxX: number, minY: number, maxY: number, rangeX: number, rangeY: number}}\r\n     * @private\r\n     */\r\n    _calcRanges () {\r\n      let positionX = this.plotsLayer.position().x / this.plotsLayer.scaleX()\r\n      let positionY = this.plotsLayer.position().y / this.plotsLayer.scaleY()\r\n\r\n      let minX = this.plotsLayer.offsetX() - positionX\r\n      let maxX = this.width / this.plotsLayer.scaleX() + this.plotsLayer.offsetX() - positionX\r\n      let minY = this.height / this.plotsLayer.scaleY() + this.plotsLayer.offsetY() - positionY\r\n      let maxY = this.plotsLayer.offsetY() - positionY\r\n\r\n      return {\r\n        minX: minX,\r\n        maxX: maxX,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        rangeX: maxX - minX,\r\n        rangeY: maxY - minY\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculate scale to zoom in and zoom out\r\n     *\r\n     * @param {number} size\r\n     * @returns {number}\r\n     * @private\r\n     */\r\n    _scaleSize (size) {\r\n      let scale = (Math.abs(this.plotsLayer.scaleX()) + Math.abs(this.plotsLayer.scaleY())) / 2\r\n      return size / scale\r\n    }\r\n\r\n    /**\r\n     * Calculate the transformation matrix\r\n     *\r\n     * @param {number} minX\r\n     * @param {number} maxX\r\n     * @param {number} minY\r\n     * @param {number} maxY\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @returns {*[]}\r\n     * @private\r\n     */\r\n    static calcTransformMatrix (minX, maxX, minY, maxY, width, height) {\r\n      let ratio = Plotter.calcMinRatio(maxX - minX, maxY - minY, width, height)\r\n\r\n      let xIntercept = -(minX * ratio)\r\n      let yIntercept = maxY * ratio\r\n\r\n      return [ratio, 0, 0, -ratio, xIntercept, yIntercept]\r\n    }\r\n  }\r\n"],"file":"plotter.js"}