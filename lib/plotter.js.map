{"version":3,"sources":["webpack://Plotter/webpack/universalModuleDefinition","webpack://Plotter/webpack/bootstrap","webpack://Plotter/./src/plotter.js","webpack://Plotter/external \"exprEval\"","webpack://Plotter/external \"Konva\""],"names":["Plotter","canvasId","width","window","height","ranges","minX","maxX","minY","maxY","gridColor","bgColor","borderColor","borderWidth","textFontSize","textFontStyle","axesWidth","plots","stage","Konva","Stage","container","staticLayer","Layer","hitGraphEnabled","add","plotsLayer","draggable","_initialRanges","setWindow","_drawBg","_drawBorder","drawAxes","draw","self","on","e","refresh","fill","filledRanges","calcFilledRanges","transformMatrix","calcTransformMatrix","scaleX","scaleY","offsetX","offsetY","_redraw","_calcRanges","rangeX","rangeY","drawLine","layer","id","points","color","strokeSize","name","axis","findOne","strokeWidth","Line","stroke","listening","transformsEnabled","strokeHitEnabled","_scaleSize","roundNumberOfDigits","number","decimal","roundLimitX","Math","pow","round","counterLines","find","each","counterLine","destroy","counterLineSize","fontSize","textHalfWidth","minusDoubleCounterLineSize","stepX","numberOfDigitsX","floor","log10","stepY","numberOfDigitsY","fixNumber","i","numberText","toFixed","writeMessage","length","func","expr","Parser","parse","_calcPoints","plot","_addExpression","expression","push","stepFine","stepRough","limitMinY","limitMaxY","limitMaxX","x","y","evaluate","plotNumber","tempLink","document","createElement","href","toDataURL","download","click","rect","Rect","opacity","perfectDrawEnabled","shadowForStrokeEnabled","position","zoom","scale","offset","positionX","positionY","size","abs","message","fontStyle","text","Text","fontFamily","xRatio","yRatio","differ","ratio","calcMinRatio","xIntercept","yIntercept","module","exports"],"mappings":"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","file":"plotter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"exprEval\"), require(\"Konva\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Plotter\", [\"exprEval\", \"Konva\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Plotter\"] = factory(require(\"exprEval\"), require(\"Konva\"));\n\telse\n\t\troot[\"Plotter\"] = factory(root[\"exprEval\"], root[\"Konva\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_expr_eval__, __WEBPACK_EXTERNAL_MODULE_konva__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/plotter.js\");\n","'use strict'\r\n\r\nimport {Parser} from 'expr-eval'\r\nimport Konva from 'konva'\r\n\r\nclass Plotter {\r\n  static get Version () {\r\n    return '1.1.0'\r\n  }\r\n\r\n  /**\r\n   * @param {string} canvasId - pass the canvas id\r\n   * @param {number} width - with of the canvas\r\n   * @param {number} height - height of the canvas\r\n   * @param {{minX: number, maxX: number, minY: number, maxY: number}} ranges - initial range of the window\r\n   * @param {object} config\r\n   */\r\n  constructor (\r\n    canvasId,\r\n    width = window.width - 200,\r\n    height = window.height - 200,\r\n    ranges = {minX: -5, maxX: 5, minY: -5, maxY: 5},\r\n    {\r\n      gridColor = '#888',\r\n      bgColor = '#fff',\r\n      borderColor = '#333',\r\n      borderWidth = 2,\r\n      textFontSize = 14,\r\n      textFontStyle = 'bold',\r\n      axesWidth = 1\r\n    } = {}) {\r\n    /**\r\n     * Array of plots\r\n     *\r\n     * @type {Array}\r\n     */\r\n    this.plots = []\r\n\r\n    this.gridColor = gridColor\r\n    this.bgColor = bgColor\r\n    this.borderColor = borderColor\r\n    this.borderWidth = borderWidth\r\n    this.textFontSize = textFontSize\r\n    this.textFontStyle = textFontStyle\r\n    this.axesWidth = axesWidth\r\n\r\n    this.width = width\r\n    this.height = height\r\n\r\n    this.stage = new Konva.Stage({\r\n      container: canvasId,\r\n      width: width,\r\n      height: height\r\n    })\r\n\r\n    this.staticLayer = new Konva.Layer({hitGraphEnabled: false})\r\n    this.stage.add(this.staticLayer)\r\n\r\n    this.plotsLayer = new Konva.Layer({draggable: true})\r\n    this.stage.add(this.plotsLayer)\r\n\r\n    /**\r\n     * Store initial ranges for reset view\r\n     *\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    this._initialRanges = ranges\r\n\r\n    this.setWindow(ranges.minX, ranges.maxX, ranges.minY, ranges.maxY, true)\r\n    this._drawBg()\r\n    this._drawBorder()\r\n    this.drawAxes()\r\n\r\n    this.plotsLayer.draw()\r\n    this.staticLayer.draw()\r\n\r\n    let self = this\r\n\r\n    // drag\r\n    this.stage.on('dragend', function (e) {\r\n      self.refresh()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Return the container\r\n   *\r\n   * @returns {HTMLElement}\r\n   */\r\n  get getContainer () {\r\n    return this.stage.container()\r\n  }\r\n\r\n  /**\r\n   * set the window range\r\n   *\r\n   * @param {number} minX\r\n   * @param {number} maxX\r\n   * @param {number} minY\r\n   * @param {number} maxY\r\n   * @param {boolean} fill - fill the window based on the canvas size\r\n   */\r\n  setWindow (minX, maxX, minY, maxY, fill = true) {\r\n    if (fill) {\r\n      let filledRanges = Plotter.calcFilledRanges(minX, maxX, minY, maxY, this.width, this.height)\r\n      ;({minX, maxX, minY, maxY} = filledRanges)\r\n    }\r\n\r\n    let transformMatrix = Plotter.calcTransformMatrix(minX, maxX, minY, maxY, this.width, this.height)\r\n\r\n    // transform the plots layer\r\n    this.plotsLayer.scaleX(transformMatrix[0])\r\n    this.plotsLayer.scaleY(transformMatrix[3])\r\n    this.plotsLayer.offsetX(-transformMatrix[4] / transformMatrix[0])\r\n    this.plotsLayer.offsetY(-transformMatrix[5] / transformMatrix[3])\r\n  }\r\n\r\n  /**\r\n   * Redraw the canvas\r\n   */\r\n  refresh () {\r\n    this._drawBg()\r\n    this.drawAxes()\r\n    this._redraw()\r\n\r\n    this.plotsLayer.draw()\r\n  }\r\n\r\n  /**\r\n   * Draw axes\r\n   */\r\n  drawAxes () {\r\n    let ranges = this._calcRanges()\r\n    let {minX, maxX, minY, maxY, rangeX, rangeY} = ranges\r\n\r\n    // increase ranges for fluent view on drag\r\n    minX -= rangeX\r\n    maxX += rangeX\r\n    minY -= rangeY\r\n    maxY += rangeY\r\n\r\n    function drawLine (layer, id, points, color, strokeSize, name) {\r\n      let axis = layer.findOne('#' + id)\r\n      if (axis) {\r\n        axis.points(points)\r\n        axis.strokeWidth(strokeSize)\r\n      } else {\r\n        axis = new Konva.Line({\r\n          points: points,\r\n          stroke: color,\r\n          strokeWidth: strokeSize,\r\n          id: id,\r\n          name: name,\r\n          listening: false,\r\n          transformsEnabled: 'none',\r\n          strokeHitEnabled: false\r\n        })\r\n        layer.add(axis)\r\n      }\r\n    }\r\n\r\n    let strokeSize = this._scaleSize(this.axesWidth)\r\n\r\n    drawLine(this.plotsLayer, 'xAxis', [minX, 0, maxX, 0], this.gridColor, strokeSize)\r\n    drawLine(this.plotsLayer, 'yAxis', [0, minY, 0, maxY], this.gridColor, strokeSize)\r\n\r\n    function roundNumberOfDigits (number, decimal) {\r\n      let roundLimitX = Math.pow(10, decimal)\r\n      return Math.round(number / roundLimitX) * roundLimitX\r\n    }\r\n\r\n    let counterLines = this.plotsLayer.find('.AxisCounter')\r\n    counterLines.each(function (counterLine) {\r\n      counterLine.destroy()\r\n    })\r\n\r\n    let counterLineSize = this._scaleSize(5)\r\n    let fontSize = 12\r\n    let textHalfWidth = this._scaleSize(3)\r\n    let minusDoubleCounterLineSize = -counterLineSize * 2\r\n\r\n    let stepX = rangeX / (this.width / 60)\r\n    let numberOfDigitsX = Math.floor(Math.log10(stepX))\r\n    stepX = roundNumberOfDigits(stepX, numberOfDigitsX)\r\n    if (stepX === 0) {\r\n      stepX = 1\r\n    }\r\n\r\n    let stepY = rangeY / (this.height / 60)\r\n    let numberOfDigitsY = Math.floor(Math.log10(stepX))\r\n    stepY = roundNumberOfDigits(stepY, numberOfDigitsY)\r\n    if (stepY === 0) {\r\n      stepY = 1\r\n    }\r\n\r\n    let fixNumber = numberOfDigitsX < 0 ? -numberOfDigitsX : 0\r\n    let i, numberText\r\n    // Draw counter lines on horizontal axis\r\n    for (i = stepX; i <= maxX; i += stepX) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n      Plotter.writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n\r\n    // Draw counter lines on horizontal axis\r\n    for (i = -stepX; i >= minX; i -= stepX) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n      Plotter.writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n\r\n    // Draw little lines on vertical axis\r\n    for (i = stepY; i <= maxY; i += stepY) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n      Plotter.writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n\r\n    // Draw little lines on vertical axis\r\n    for (i = -stepY; i >= minY; i -= stepY) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n      Plotter.writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write a message on a layer\r\n   *\r\n   * @param layer\r\n   * @param id\r\n   * @param x\r\n   * @param y\r\n   * @param message\r\n   * @param color\r\n   * @param fontSize\r\n   * @param fontStyle\r\n   * @param name\r\n   */\r\n  static writeMessage (layer, id, x, y, message, color, fontSize = 14, fontStyle = 'normal', name) {\r\n    let text = layer.findOne('#' + id)\r\n    if (text) {\r\n      text.x(x)\r\n      text.y(y)\r\n      text.text(message)\r\n      text.fontSize(fontSize)\r\n      text.fill(color)\r\n    } else {\r\n      text = new Konva.Text({\r\n        x: x,\r\n        y: y,\r\n        text: message,\r\n        id: id,\r\n        fontSize: fontSize,\r\n        fontFamily: 'Calibri',\r\n        fill: color,\r\n        fontStyle: fontStyle,\r\n        name: name,\r\n        scaleX: 1 / layer.scaleX(),\r\n        scaleY: 1 / layer.scaleY(),\r\n        listening: false\r\n      })\r\n      layer.add(text)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a new function and plot it\r\n   *\r\n   * @param func\r\n   * @param color\r\n   */\r\n  plot (func, color) {\r\n    let expr = Parser.parse(func)\r\n    let points = this._calcPoints(expr)\r\n\r\n    let plot = new Konva.Line({\r\n      id: 'plot' + this.plots.length,\r\n      points: points,\r\n      stroke: color,\r\n      strokeWidth: this._scaleSize(2),\r\n      draggable: false,\r\n      transformsEnabled: 'none',\r\n      listening: false\r\n    })\r\n\r\n    this.plotsLayer.add(plot)\r\n    this.plotsLayer.draw()\r\n\r\n    this._addExpression(this.plots.length, func, color)\r\n\r\n    // keep the original input and color assigned to the expression\r\n    expr.expression = func\r\n    expr.color = color\r\n\r\n    this.plots.push(expr)\r\n  }\r\n\r\n  /**\r\n   * Redraw the added functions\r\n   *\r\n   * @private\r\n   */\r\n  _redraw () {\r\n    let strokeSize = this._scaleSize(2)\r\n\r\n    for (let i = 0; i < this.plots.length; i++) {\r\n      let plot = this.plotsLayer.findOne('#plot' + i)\r\n      let expr = this.plots[i]\r\n      let points = this._calcPoints(expr)\r\n      plot.points(points)\r\n      plot.strokeWidth(strokeSize)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate points associated to a function in the defined range\r\n   *\r\n   * @param expr\r\n   * @returns {Array}\r\n   * @private\r\n   */\r\n  _calcPoints (expr) {\r\n    let ranges = this._calcRanges()\r\n\r\n    let minX = ranges.minX\r\n    let maxX = ranges.maxX\r\n    let minY = ranges.minY\r\n    let maxY = ranges.maxY\r\n\r\n    let rangeX = maxX - minX\r\n    let rangeY = maxY - minY\r\n\r\n    let stepFine = this._scaleSize(0.05)\r\n    let stepRough = this._scaleSize(1)\r\n\r\n    let points = []\r\n\r\n    let limitMinY = minY - rangeY\r\n    let limitMaxY = maxY + rangeY\r\n    let limitMaxX = maxX + rangeX\r\n\r\n    let x, y\r\n    for (x = minX - rangeX; x < minX; x += stepRough) {\r\n      y = expr.evaluate({x: x})\r\n      if (limitMaxY < y || y < limitMinY) continue\r\n      points.push(x)\r\n      points.push(y)\r\n    }\r\n\r\n    for (x = minX; x < maxX; x += stepFine) {\r\n      y = expr.evaluate({x: x})\r\n      if (limitMaxY < y || y < limitMinY) continue\r\n      points.push(x)\r\n      points.push(y)\r\n    }\r\n\r\n    for (x = maxX; x <= limitMaxX; x += stepRough) {\r\n      y = expr.evaluate({x: x})\r\n      if (limitMaxY < y || y < limitMinY) continue\r\n      points.push(x)\r\n      points.push(y)\r\n    }\r\n\r\n    return points\r\n  }\r\n\r\n  _addExpression (plotNumber, func, color) {\r\n    Plotter.writeMessage(this.staticLayer, 'expression' + this.plots.length, 10, 20 * this.plots.length + 10, func, color, 14, 'bold', 'expression')\r\n    this.staticLayer.draw()\r\n  }\r\n\r\n  clear () {\r\n    for (let i = 0; i < this.plots.length; i++) {\r\n      let plot = this.plotsLayer.findOne('#plot' + i)\r\n      plot.destroy()\r\n      let expression = this.staticLayer.findOne('#expression' + i)\r\n      expression.destroy()\r\n    }\r\n    this.plots = []\r\n\r\n    this.refresh()\r\n    this.staticLayer.draw()\r\n  }\r\n\r\n  download () {\r\n    let tempLink = document.createElement('a')\r\n    tempLink.href = this.stage.toDataURL()\r\n    tempLink.download = 'plot.png'\r\n    tempLink.click()\r\n  }\r\n\r\n  /**\r\n   * Add a transparent box to enhance dragging\r\n   *\r\n   * @private\r\n   */\r\n  _drawBg () {\r\n    let ranges = this._calcRanges()\r\n\r\n    let rangeX = ranges.maxX - ranges.minX\r\n    let rangeY = ranges.maxY - ranges.minY\r\n\r\n    let rect = this.plotsLayer.findOne('#bg')\r\n    if (rect) {\r\n      rect.x(ranges.minX)\r\n      rect.y(ranges.minY)\r\n      rect.width(rangeX)\r\n      rect.height(rangeY)\r\n    } else {\r\n      rect = new Konva.Rect({\r\n        id: 'bg',\r\n        x: ranges.minX,\r\n        y: ranges.minY,\r\n        width: rangeX,\r\n        height: rangeY,\r\n        fill: '#fff', // not important since the box is invisible\r\n        stroke: '#fff', // not important since the box is invisible\r\n        strokeWidth: 0,\r\n        opacity: 0,\r\n        perfectDrawEnabled: false,\r\n        shadowForStrokeEnabled: false\r\n      })\r\n\r\n      this.plotsLayer.add(rect)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a border box to enhance dragging and add a border to canvas\r\n   *\r\n   * @private\r\n   */\r\n  _drawBorder () {\r\n    let rect = new Konva.Rect({\r\n      id: 'border',\r\n      x: 0,\r\n      y: 0,\r\n      width: this.width,\r\n      height: this.height,\r\n      fill: this.bgColor,\r\n      stroke: this.borderColor,\r\n      strokeWidth: this.borderWidth,\r\n      perfectDrawEnabled: false,\r\n      listening: false,\r\n      shadowForStrokeEnabled: false\r\n    })\r\n\r\n    this.staticLayer.add(rect)\r\n  }\r\n\r\n  /**\r\n   * Reset view to initial state\r\n   */\r\n  resetView () {\r\n    this.plotsLayer.position({x: 0, y: 0})\r\n    this.setWindow(this._initialRanges.minX, this._initialRanges.maxX, this._initialRanges.minY, this._initialRanges.maxY, true)\r\n\r\n    this.refresh()\r\n  }\r\n\r\n  /**\r\n   * Zoom\r\n   *\r\n   * @param {number} zoom\r\n   */\r\n  zoom (zoom) {\r\n    let scale = this.plotsLayer.scale()\r\n    let offset = this.plotsLayer.offset()\r\n\r\n    this.plotsLayer.scale({x: scale.x * zoom, y: scale.y * zoom})\r\n    this.plotsLayer.offset({x: offset.x / zoom, y: offset.y / zoom})\r\n\r\n    this.refresh()\r\n  }\r\n\r\n  /**\r\n   * Calculate the smaller ratio\r\n   *\r\n   * @param {number} rangeX\r\n   * @param {number} rangeY\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @returns {number}\r\n   *\r\n   * @private\r\n   */\r\n  static calcMinRatio (rangeX, rangeY, width, height) {\r\n    let xRatio = width / rangeX\r\n    let yRatio = height / rangeY\r\n\r\n    return yRatio < xRatio ? yRatio : xRatio\r\n  }\r\n\r\n  /**\r\n   * calculate the range to fill the canvas\r\n   *\r\n   * @param {number} minX\r\n   * @param {number} maxX\r\n   * @param {number} minY\r\n   * @param {number} maxY\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @returns {{minX: number, maxX: number, minY: number, maxY: number, rangeX: number, rangeY: number}}\r\n   *\r\n   * @private\r\n   */\r\n  static calcFilledRanges (minX, maxX, minY, maxY, width, height) {\r\n    let rangeX = maxX - minX\r\n    let rangeY = maxY - minY\r\n\r\n    let differ\r\n    let ratio = Plotter.calcMinRatio(rangeX, rangeY, width, height)\r\n\r\n    // increase horizontal range to fill the canvas\r\n    if (rangeX * ratio < width) {\r\n      differ = (width / ratio - rangeX) / 2\r\n      return {\r\n        minX: minX - differ,\r\n        maxX: maxX + differ,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        rangeX: maxX + differ - (minX - differ),\r\n        rangeY: maxY - minY\r\n      }\r\n    }\r\n\r\n    // increase vertical range to fill the canvas\r\n    if (rangeY * ratio < height) {\r\n      differ = (height / ratio - rangeY) / 2\r\n      return {\r\n        minX: minX,\r\n        maxX: maxX,\r\n        minY: minY - differ,\r\n        maxY: maxY + differ,\r\n        rangeX: maxX - minX,\r\n        rangeY: maxY + differ - (minY - differ)\r\n      }\r\n    }\r\n\r\n    return {\r\n      minX: minX,\r\n      maxX: maxX,\r\n      minY: minY,\r\n      maxY: maxY,\r\n      rangeX: maxX - minX,\r\n      rangeY: maxY - minY\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the displaying range\r\n   *\r\n   * @returns {{minX: number, maxX: number, minY: number, maxY: number, rangeX: number, rangeY: number}}\r\n   * @private\r\n   */\r\n  _calcRanges () {\r\n    let positionX = this.plotsLayer.position().x / this.plotsLayer.scaleX()\r\n    let positionY = this.plotsLayer.position().y / this.plotsLayer.scaleY()\r\n\r\n    let minX = this.plotsLayer.offsetX() - positionX\r\n    let maxX = this.width / this.plotsLayer.scaleX() + this.plotsLayer.offsetX() - positionX\r\n    let minY = this.height / this.plotsLayer.scaleY() + this.plotsLayer.offsetY() - positionY\r\n    let maxY = this.plotsLayer.offsetY() - positionY\r\n\r\n    return {\r\n      minX: minX,\r\n      maxX: maxX,\r\n      minY: minY,\r\n      maxY: maxY,\r\n      rangeX: maxX - minX,\r\n      rangeY: maxY - minY\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate scale to zoom in and zoom out\r\n   *\r\n   * @param {number} size\r\n   * @returns {number}\r\n   * @private\r\n   */\r\n  _scaleSize (size) {\r\n    let scale = (Math.abs(this.plotsLayer.scaleX()) + Math.abs(this.plotsLayer.scaleY())) / 2\r\n    return size / scale\r\n  }\r\n\r\n  /**\r\n   * Calculate the transformation matrix\r\n   *\r\n   * @param {number} minX\r\n   * @param {number} maxX\r\n   * @param {number} minY\r\n   * @param {number} maxY\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @returns {*[]}\r\n   * @private\r\n   */\r\n  static calcTransformMatrix (minX, maxX, minY, maxY, width, height) {\r\n    let ratio = Plotter.calcMinRatio(maxX - minX, maxY - minY, width, height)\r\n\r\n    let xIntercept = -(minX * ratio)\r\n    let yIntercept = maxY * ratio\r\n\r\n    return [ratio, 0, 0, -ratio, xIntercept, yIntercept]\r\n  }\r\n}\r\n\r\nmodule.exports = Plotter\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_expr_eval__;","module.exports = __WEBPACK_EXTERNAL_MODULE_konva__;"],"sourceRoot":""}