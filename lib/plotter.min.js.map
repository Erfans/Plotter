{"version":3,"sources":["webpack://plotter/webpack/universalModuleDefinition","webpack://plotter/webpack/bootstrap","webpack://plotter/external \"konva\"","webpack://plotter/external \"expr-eval\"","webpack://plotter/./src/plotter.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_exprEval","_konva","Plotter","canvasId","width","arguments","length","undefined","height","ranges","minX","maxX","minY","maxY","_classCallCheck","this","plots","gridColor","stage","Konva","Stage","container","staticLayer","Layer","hitGraphEnabled","add","plotsLayer","draggable","_initialRanges","setWindow","_drawBg","_drawBorder","drawAxes","draw","self","on","e","refresh","filledRanges","_calcFilledRanges","transformMatrix","_calcTransformMatrix","scaleX","scaleY","offsetX","offsetY","_redraw","_calcRanges","rangeX","rangeY","drawLine","layer","id","points","color","strokeSize","axis","findOne","strokeWidth","Line","stroke","listening","transformsEnabled","strokeHitEnabled","_scaleSize","roundNumberOfDigits","number","decimal","roundLimitX","Math","pow","round","find","each","counterLine","destroy","counterLineSize","textHalfWidth","minusDoubleCounterLineSize","stepX","numberOfDigitsX","floor","log10","stepY","fixNumber","numberText","toFixed","_writeMessage","x","y","message","fontSize","fontStyle","text","fill","Text","fontFamily","func","expr","Parser","parse","_calcPoints","plot","_addExpression","expression","push","stepFine","stepRough","limitMinY","limitMaxY","limitMaxX","evaluate","plotNumber","tempLink","document","createElement","href","toDataURL","download","click","rect","Rect","opacity","perfectDrawEnabled","shadowForStrokeEnabled","bgColor","strokeColor","position","zoom","scale","offset","xRatio","yRatio","differ","ratio","_calcMinRatio","positionX","positionY","size","abs"],"mappings":"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","file":"plotter.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"konva\"), require(\"expr-eval\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"plotter\", [\"konva\", \"expr-eval\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"plotter\"] = factory(require(\"konva\"), require(\"expr-eval\"));\n\telse\n\t\troot[\"plotter\"] = factory(root[\"konva\"], root[\"expr-eval\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","/**\r\n * Created by Erfan on 8/10/2016.\r\n * erfan.shamabadi.com\r\n */\r\n\r\n'use strict'\r\n\r\nimport {Parser} from 'expr-eval'\r\nimport Konva from 'konva'\r\n\r\nexport default class Plotter {\r\n  /**\r\n   * @param {string} canvasId - pass the canvas id\r\n   * @param {number} width - with of the canvas\r\n   * @param {number} height - height of the canvas\r\n   * @param {object} ranges - initial range of the window\r\n   */\r\n  constructor (\r\n    canvasId,\r\n    width = window.width - 200,\r\n    height = window.height - 200,\r\n    ranges = {minX: -5, maxX: 5, minY: -5, maxY: 5}) {\r\n    /**\r\n     * Array of plots\r\n     *\r\n     * @type {Array}\r\n     */\r\n    this.plots = []\r\n\r\n    this.gridColor = '#888'\r\n\r\n    this.width = width\r\n    this.height = height\r\n\r\n    this.stage = new Konva.Stage({\r\n      container: canvasId,\r\n      width: width,\r\n      height: height\r\n    })\r\n\r\n    this.staticLayer = new Konva.Layer({hitGraphEnabled: false})\r\n    this.stage.add(this.staticLayer)\r\n\r\n    this.plotsLayer = new Konva.Layer({draggable: true})\r\n    this.stage.add(this.plotsLayer)\r\n\r\n    /**\r\n     * Store initial ranges for reset view\r\n     *\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    this._initialRanges = ranges\r\n\r\n    this.setWindow(ranges.minX, ranges.maxX, ranges.minY, ranges.maxY, true)\r\n    this._drawBg()\r\n    this._drawBorder()\r\n    this.drawAxes()\r\n\r\n    this.plotsLayer.draw()\r\n    this.staticLayer.draw()\r\n\r\n    let self = this\r\n\r\n    // drag\r\n    this.stage.on('dragend', function (e) {\r\n      self.refresh()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Return the container\r\n   *\r\n   * @returns {HTMLElement}\r\n   */\r\n  get getContainer () {\r\n    return this.stage.container()\r\n  }\r\n\r\n  /**\r\n   * set the window range\r\n   *\r\n   * @param {number} minX\r\n   * @param {number} maxX\r\n   * @param {number} minY\r\n   * @param {number} maxY\r\n   * @param {boolean} fill - fill the window based on the canvas size\r\n   */\r\n  setWindow (minX, maxX, minY, maxY, fill = true) {\r\n    if (fill) {\r\n      let filledRanges = this._calcFilledRanges(minX, maxX, minY, maxY, this.width, this.height)\r\n      minX = filledRanges.minX\r\n      maxX = filledRanges.maxX\r\n      minY = filledRanges.minY\r\n      maxY = filledRanges.maxY\r\n    }\r\n\r\n    let transformMatrix = this._calcTransformMatrix(minX, maxX, minY, maxY, this.width, this.height)\r\n\r\n    // transform the plots layer\r\n    this.plotsLayer.scaleX(transformMatrix[0])\r\n    this.plotsLayer.scaleY(transformMatrix[3])\r\n    this.plotsLayer.offsetX(-transformMatrix[4] / transformMatrix[0])\r\n    this.plotsLayer.offsetY(-transformMatrix[5] / transformMatrix[3])\r\n  }\r\n\r\n  /**\r\n   * Redraw the canvas\r\n   */\r\n  refresh () {\r\n    this._drawBg()\r\n    this.drawAxes()\r\n    this._redraw()\r\n\r\n    this.plotsLayer.draw()\r\n  }\r\n\r\n  /**\r\n   * Draw axes\r\n   */\r\n  drawAxes () {\r\n    let ranges = this._calcRanges()\r\n\r\n    let minX = ranges.minX\r\n    let maxX = ranges.maxX\r\n    let minY = ranges.minY\r\n    let maxY = ranges.maxY\r\n\r\n    let rangeX = maxX - minX\r\n    let rangeY = maxY - minY\r\n\r\n    // increase ranges for fluent view on drag\r\n    minX -= rangeX\r\n    maxX += rangeX\r\n    minY -= rangeY\r\n    maxY += rangeY\r\n\r\n    function drawLine (layer, id, points, color, strokeSize, name) {\r\n      let axis = layer.findOne('#' + id)\r\n      if (axis) {\r\n        axis.points(points)\r\n        axis.strokeWidth(strokeSize)\r\n      } else {\r\n        axis = new Konva.Line({\r\n          points: points,\r\n          stroke: color,\r\n          strokeWidth: strokeSize,\r\n          id: id,\r\n          name: name,\r\n          listening: false,\r\n          transformsEnabled: 'none',\r\n          strokeHitEnabled: false\r\n        })\r\n        layer.add(axis)\r\n      }\r\n    }\r\n\r\n    let strokeSize = this._scaleSize(1)\r\n\r\n    drawLine(this.plotsLayer, 'xAxis', [minX, 0, maxX, 0], this.gridColor, strokeSize)\r\n    drawLine(this.plotsLayer, 'yAxis', [0, minY, 0, maxY], this.gridColor, strokeSize)\r\n\r\n    function roundNumberOfDigits (number, decimal) {\r\n      let roundLimitX = Math.pow(10, decimal)\r\n      return Math.round(number / roundLimitX) * roundLimitX\r\n    }\r\n\r\n    let counterLines = this.plotsLayer.find('.AxisCounter')\r\n    counterLines.each(function (counterLine) {\r\n      counterLine.destroy()\r\n    })\r\n\r\n    let counterLineSize = this._scaleSize(5)\r\n    let fontSize = 12\r\n    let textHalfWidth = this._scaleSize(3)\r\n    let minusDoubleCounterLineSize = -counterLineSize * 2\r\n\r\n    let stepX = rangeX / (this.width / 60)\r\n    let numberOfDigitsX = Math.floor(Math.log10(stepX))\r\n    stepX = roundNumberOfDigits(stepX, numberOfDigitsX)\r\n    if (stepX === 0) {\r\n      stepX = 1\r\n    }\r\n\r\n    let stepY = rangeY / (this.height / 60)\r\n    let numberOfDigitsY = Math.floor(Math.log10(stepX))\r\n    stepY = roundNumberOfDigits(stepY, numberOfDigitsY)\r\n    if (stepY === 0) {\r\n      stepY = 1\r\n    }\r\n\r\n    let fixNumber = numberOfDigitsX < 0 ? -numberOfDigitsX : 0\r\n    let i, numberText\r\n    // Draw counter lines on horizontal axis\r\n    for (i = stepX; i <= maxX; i += stepX) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n      this._writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n\r\n    // Draw counter lines on horizontal axis\r\n    for (i = -stepX; i >= minX; i -= stepX) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'xAxis[' + numberText + ']', [i, -counterLineSize, i, counterLineSize], this.gridColor, strokeSize, 'AxisCounter')\r\n      this._writeMessage(this.plotsLayer, 'xAxisNum[' + numberText + ']', i - numberText.length * textHalfWidth, minusDoubleCounterLineSize, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n\r\n    // Draw little lines on vertical axis\r\n    for (i = stepY; i <= maxY; i += stepY) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n      this._writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n\r\n    // Draw little lines on vertical axis\r\n    for (i = -stepY; i >= minY; i -= stepY) {\r\n      numberText = i.toFixed(fixNumber)\r\n      drawLine(this.plotsLayer, 'yAxis[' + numberText + ']', [-counterLineSize, i, counterLineSize, i], this.gridColor, strokeSize, 'AxisCounter')\r\n      this._writeMessage(this.plotsLayer, 'yAxisNum[' + numberText + ']', minusDoubleCounterLineSize - numberText.length * textHalfWidth * 2, i + textHalfWidth, numberText, this.gridColor, fontSize, 'normal', 'AxisCounter')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write a message on a layer\r\n   *\r\n   * @param layer\r\n   * @param id\r\n   * @param x\r\n   * @param y\r\n   * @param message\r\n   * @param color\r\n   * @param fontSize\r\n   * @param fontStyle\r\n   * @param name\r\n   * @private\r\n   */\r\n  _writeMessage (layer, id, x, y, message, color, fontSize, fontStyle, name) {\r\n    fontStyle = fontStyle || 'normal'\r\n\r\n    let text = layer.findOne('#' + id)\r\n    if (text) {\r\n      text.x(x)\r\n      text.y(y)\r\n      text.text(message)\r\n      text.fontSize(fontSize)\r\n      text.fill(color)\r\n    } else {\r\n      text = new Konva.Text({\r\n        x: x,\r\n        y: y,\r\n        text: message,\r\n        id: id,\r\n        fontSize: fontSize,\r\n        fontFamily: 'Calibri',\r\n        fill: color,\r\n        fontStyle: fontStyle,\r\n        name: name,\r\n        scaleX: 1 / layer.scaleX(),\r\n        scaleY: 1 / layer.scaleY(),\r\n        listening: false\r\n      })\r\n      layer.add(text)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a new function and plot it\r\n   *\r\n   * @param func\r\n   * @param color\r\n   */\r\n  plot (func, color) {\r\n    let expr = Parser.parse(func)\r\n    let points = this._calcPoints(expr)\r\n\r\n    let plot = new Konva.Line({\r\n      id: 'plot' + this.plots.length,\r\n      points: points,\r\n      stroke: color,\r\n      strokeWidth: this._scaleSize(2),\r\n      draggable: false,\r\n      transformsEnabled: 'none',\r\n      listening: false\r\n    })\r\n\r\n    this.plotsLayer.add(plot)\r\n    this.plotsLayer.draw()\r\n\r\n    this._addExpression(this.plots.length, func, color)\r\n\r\n    // keep the original input and color assigned to the expression\r\n    expr.expression = func\r\n    expr.color = color\r\n\r\n    this.plots.push(expr)\r\n  }\r\n\r\n  /**\r\n   * Redraw the added functions\r\n   *\r\n   * @private\r\n   */\r\n  _redraw () {\r\n    let strokeSize = this._scaleSize(2)\r\n\r\n    for (let i = 0; i < this.plots.length; i++) {\r\n      let plot = this.plotsLayer.findOne('#plot' + i)\r\n      let expr = this.plots[i]\r\n      let points = this._calcPoints(expr)\r\n      plot.points(points)\r\n      plot.strokeWidth(strokeSize)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate points associated to a function in the defined range\r\n   *\r\n   * @param expr\r\n   * @returns {Array}\r\n   * @private\r\n   */\r\n  _calcPoints (expr) {\r\n    let ranges = this._calcRanges()\r\n\r\n    let minX = ranges.maxX\r\n    let maxX = ranges.maxX\r\n    let minY = ranges.minY\r\n    let maxY = ranges.maxY\r\n\r\n    let rangeX = maxX - minX\r\n    let rangeY = maxY - minY\r\n\r\n    let stepFine = this._scaleSize(0.05)\r\n    let stepRough = this._scaleSize(1)\r\n\r\n    let points = []\r\n\r\n    let limitMinY = minY - rangeY\r\n    let limitMaxY = maxY + rangeY\r\n    let limitMaxX = maxX + rangeX\r\n\r\n    let x, y\r\n    for (x = minX - rangeX; x < minX; x += stepRough) {\r\n      y = expr.evaluate({x: x})\r\n      if (limitMaxY < y || y < limitMinY) continue\r\n      points.push(x)\r\n      points.push(y)\r\n    }\r\n\r\n    for (x = minX; x < maxX; x += stepFine) {\r\n      y = expr.evaluate({x: x})\r\n      if (limitMaxY < y || y < limitMinY) continue\r\n      points.push(x)\r\n      points.push(y)\r\n    }\r\n\r\n    for (x = maxX; x <= limitMaxX; x += stepRough) {\r\n      y = expr.evaluate({x: x})\r\n      if (limitMaxY < y || y < limitMinY) continue\r\n      points.push(x)\r\n      points.push(y)\r\n    }\r\n\r\n    return points\r\n  }\r\n\r\n  _addExpression (plotNumber, func, color) {\r\n    this._writeMessage(this.staticLayer, 'expression' + this.plots.length, 10, 20 * this.plots.length + 10, func, color, 14, 'bold', 'expression')\r\n    this.staticLayer.draw()\r\n  }\r\n\r\n  clear () {\r\n    for (let i = 0; i < this.plots.length; i++) {\r\n      let plot = this.plotsLayer.findOne('#plot' + i)\r\n      plot.destroy()\r\n      let expression = this.staticLayer.findOne('#expression' + i)\r\n      expression.destroy()\r\n    }\r\n    this.plots = []\r\n\r\n    this.refresh()\r\n    this.staticLayer.draw()\r\n  }\r\n\r\n  download () {\r\n    let tempLink = document.createElement('a')\r\n    tempLink.href = this.stage.toDataURL()\r\n    tempLink.download = 'plot.png'\r\n    tempLink.click()\r\n  }\r\n\r\n  _drawBg () {\r\n    // add transparent box to enhance dragging\r\n    let ranges = this._calcRanges()\r\n\r\n    let rangeX = ranges.maxX - ranges.minX\r\n    let rangeY = ranges.maxY - ranges.minY\r\n\r\n    let rect = this.plotsLayer.findOne('#bg')\r\n    if (rect) {\r\n      rect.x(ranges.minX)\r\n      rect.y(ranges.minY)\r\n      rect.width(rangeX)\r\n      rect.height(rangeY)\r\n    } else {\r\n      rect = new Konva.Rect({\r\n        id: 'bg',\r\n        x: ranges.minX,\r\n        y: ranges.minY,\r\n        width: rangeX,\r\n        height: rangeY,\r\n        fill: '#fff',\r\n        stroke: '#fff',\r\n        strokeWidth: 0,\r\n        opacity: 0,\r\n        perfectDrawEnabled: false,\r\n        shadowForStrokeEnabled: false\r\n      })\r\n\r\n      this.plotsLayer.add(rect)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a border box to enhance dragging and add a border to canvas\r\n   *\r\n   * @param {string} bgColor\r\n   * @param {string} strokeColor\r\n   * @param {number} strokeWidth\r\n   *\r\n   * @private\r\n   */\r\n  _drawBorder (bgColor = '#fff', strokeColor = '#555', strokeWidth = 2) {\r\n    let rect = new Konva.Rect({\r\n      id: 'border',\r\n      x: 0,\r\n      y: 0,\r\n      width: this.width,\r\n      height: this.height,\r\n      fill: bgColor,\r\n      stroke: strokeColor,\r\n      strokeWidth: strokeWidth,\r\n      perfectDrawEnabled: false,\r\n      listening: false,\r\n      shadowForStrokeEnabled: false\r\n    })\r\n\r\n    this.staticLayer.add(rect)\r\n  }\r\n\r\n  /**\r\n   * Reset view to initial state\r\n   */\r\n  resetView () {\r\n    this.plotsLayer.position({x: 0, y: 0})\r\n    this.setWindow(this._initialRanges.minX, this._initialRanges.maxX, this._initialRanges.minY, this._initialRanges.maxY, true)\r\n\r\n    this.refresh()\r\n  }\r\n\r\n  /**\r\n   * Zoom\r\n   *\r\n   * @param {number} zoom\r\n   */\r\n  zoom (zoom) {\r\n    let scale = this.plotsLayer.scale()\r\n    let offset = this.plotsLayer.offset()\r\n\r\n    this.plotsLayer.scale({x: scale.x * zoom, y: scale.y * zoom})\r\n    this.plotsLayer.offset({x: offset.x / zoom, y: offset.y / zoom})\r\n\r\n    this.refresh()\r\n  }\r\n\r\n  /**\r\n   * Calculate the smaller ratio\r\n   *\r\n   * @param {number} rangeX\r\n   * @param {number} rangeY\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @returns {number}\r\n   *\r\n   * @private\r\n   */\r\n  _calcMinRatio (rangeX, rangeY, width, height) {\r\n    let xRatio = width / rangeX\r\n    let yRatio = height / rangeY\r\n\r\n    return yRatio < xRatio ? yRatio : xRatio\r\n  }\r\n\r\n  /**\r\n   * calculate the range to fill the canvas\r\n   *\r\n   * @param {number} minX\r\n   * @param {number} maxX\r\n   * @param {number} minY\r\n   * @param {number} maxY\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @returns {{minX: number, maxX: number, minY: number, maxY: number}}\r\n   *\r\n   * @private\r\n   */\r\n  _calcFilledRanges (minX, maxX, minY, maxY, width, height) {\r\n    let rangeX = maxX - minX\r\n    let rangeY = maxY - minY\r\n\r\n    let differ\r\n    let ratio = this._calcMinRatio(rangeX, rangeY, width, height)\r\n\r\n    // increase horizontal range to fill the canvas\r\n    if (rangeX * ratio < width) {\r\n      differ = (width / ratio - rangeX) / 2\r\n      return {minX: minX - differ, maxX: maxX + differ, minY: minY, maxY: maxY}\r\n    }\r\n\r\n    // increase vertical range to fill the canvas\r\n    if (rangeY * ratio < height) {\r\n      differ = (height / ratio - rangeY) / 2\r\n      return {minX: minX, maxX: maxX, minY: minY - differ, maxY: maxY + differ}\r\n    }\r\n\r\n    return {minX: minX, maxX: maxX, minY: minY, maxY: maxY}\r\n  }\r\n\r\n  /**\r\n   * Calculate the displaying range\r\n   *\r\n   * @returns {{minX: number, maxX: number, minY: number, maxY: number}}\r\n   * @private\r\n   */\r\n  _calcRanges () {\r\n    let positionX = this.plotsLayer.position().x / this.plotsLayer.scaleX()\r\n    let positionY = this.plotsLayer.position().y / this.plotsLayer.scaleY()\r\n\r\n    let minX = this.plotsLayer.offsetX() - positionX\r\n    let maxX = this.width / this.plotsLayer.scaleX() + this.plotsLayer.offsetX() - positionX\r\n    let minY = this.height / this.plotsLayer.scaleY() + this.plotsLayer.offsetY() - positionY\r\n    let maxY = this.plotsLayer.offsetY() - positionY\r\n\r\n    return {minX: minX, maxX: maxX, minY: minY, maxY: maxY}\r\n  }\r\n\r\n  /**\r\n   * Calculate scale to zoom in and zoom out\r\n   *\r\n   * @param {number} size\r\n   * @returns {number}\r\n   * @private\r\n   */\r\n  _scaleSize (size) {\r\n    let scale = (Math.abs(this.plotsLayer.scaleX()) + Math.abs(this.plotsLayer.scaleY())) / 2\r\n    return size / scale\r\n  }\r\n\r\n  /**\r\n   * Calculate the transformation matrix\r\n   *\r\n   * @param {number} minX\r\n   * @param {number} maxX\r\n   * @param {number} minY\r\n   * @param {number} maxY\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @returns {*[]}\r\n   * @private\r\n   */\r\n  _calcTransformMatrix (minX, maxX, minY, maxY, width, height) {\r\n    let ratio = this._calcMinRatio(maxX - minX, maxY - minY, width, height)\r\n\r\n    let xIntercept = -(minX * ratio)\r\n    let yIntercept = maxY * ratio\r\n\r\n    return [ratio, 0, 0, -ratio, xIntercept, yIntercept]\r\n  }\r\n}\r\n"],"sourceRoot":""}